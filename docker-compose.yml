version: '3.8'

volumes:
  neo4j_data:
  neo4j_logs:
  mongodb_data:
  redis_data:
  portainer_data:
  orchestrator_data:

services:
  # MCP Orchestrator Proxy - Manages all MCPs as subprocesses
  mcp-orchestrator-proxy:
    build: .
    container_name: mcp-orchestrator-proxy
    restart: unless-stopped
    network_mode: "host"  # Use host network for simplicity
    volumes:
      - ./config:/app/config
      - orchestrator_data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker MCP
    environment:
      - NODE_ENV=production
      - PYTHONPATH=/app
      # Neo4j connection for memory MCP
      - NEO4J_URI=bolt://localhost:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-secure_password_here}
      # MongoDB connection
      - MONGODB_URI=mongodb://admin:${MONGO_PASSWORD:-secure_password}@localhost:27017/mcp
      # Redis connection
      - REDIS_URL=redis://localhost:6379
      # GitHub token for GitHub MCP
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      # ComfyUI URL if needed
      - COMFYUI_URL=${COMFYUI_URL:-http://localhost:8188}
    depends_on:
      neo4j:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Neo4j for Memory System
  neo4j:
    image: neo4j:2025.05.0
    container_name: neo4j
    restart: unless-stopped
    network_mode: "host"
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-secure_password_here}
      - NEO4J_server_memory_pagecache_size=2G
      - NEO4J_server_memory_heap_max__size=2G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD:-secure_password_here}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB for Document Storage
  mongodb:
    image: mongo:7.0
    container_name: mongodb
    restart: unless-stopped
    network_mode: "host"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-secure_password}
      - MONGO_INITDB_DATABASE=mcp
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7.2.3-alpine
    container_name: redis
    restart: unless-stopped
    network_mode: "host"
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Portainer for Container Management (optional)
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    network_mode: "host"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
